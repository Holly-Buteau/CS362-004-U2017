        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************
        -:    2: * UpdateCoin Test
        -:    3: * put in makefile : 
        -:    4: * testUpdateCoin: unittest2.c dominion.o rngs.o
        -:    5: * 	gcc -o unit2test -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: ***********************************************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:
        1:   19:int main() {
        -:   20:    int i;
        1:   21:    int seed = 1000;
        1:   22:    int numPlayer = 2;
        1:   23:    int maxBonus = 10;
        -:   24:    int p, r, handCount;
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:               , remodel, smithy, village, baron, great_hall};
        1:   27:    int testBonus = 0;
        -:   28:    struct gameState G, T;
        -:   29:
        1:   30:	initializeGame(numPlayer, k, seed, &G);
        -:   31:	
        1:   32:	printf("TESTING : updateCoins\n");
        1:   33:	memcpy(&T, &G, sizeof(struct gameState));
        -:   34:	
        1:   35:	printf("Testing Only Treasure\n");
        1:   36:	T.hand[0][0] = smithy;
        1:   37:	T.hand[0][1] = village;
        1:   38:	T.hand[0][2] = copper;
        1:   39:	T.hand[0][3] = silver;
        1:   40:	T.hand[0][4] = gold;
        1:   41:	updateCoins(0, &T, testBonus);
        1:   42:	printf("Coin Worth = %d, expected = %d\n", T.coins, 6);
        1:   43:	if (T.coins == 6)
        1:   44:		printf("Success\n");
        -:   45:	else
    #####:   46:		printf("Fail\n");
        -:   47:
        -:   48:
        -:   49:	//memset(&T, &G, sizeof(struct gameState));	
        -:   50:
        -:   51:
        1:   52:	printf("Testing Treasure and Bonuses\n");
        1:   53:	T.hand[0][0] = smithy;
        1:   54:        T.hand[0][1] = village;
        1:   55:        T.hand[0][2] = copper;
        1:   56:        T.hand[0][3] = silver;
        1:   57:        T.hand[0][4] = gold;
        1:   58:	testBonus = 10; 	
        1:   59:	updateCoins(0, &T, testBonus);
        1:   60:   	printf("Coin Worth = %d, expected = %d\n", T.coins, 16);
        1:   61:	if (T.coins == 16)
        1:   62:                printf("Success\n");
        -:   63:        else
    #####:   64:                printf("Fail\n");
        -:   65:	 
        -:   66:
        -:   67:	//memset(&T, &G, sizeof(struct gameState));
        -:   68:
        1:   69:	printf("Testing Only Bonuses\n");		
        1:   70:	T.hand[0][0] = smithy;
        1:   71:        T.hand[0][1] = village;
        1:   72:        T.hand[0][2] = adventurer;
        1:   73:        T.hand[0][3] = gardens;
        1:   74:        T.hand[0][4] = remodel;
        1:   75:	testBonus = 10;
        1:   76:	updateCoins(0, &T, testBonus);
        1:   77:	printf("Coin Worth = %d, expected = %d\n", T.coins, 10);
        1:   78:	 if (T.coins == 10)
        1:   79:                 printf("Success\n");
        -:   80:         else
    #####:   81:                 printf("Fail\n");
        -:   82:			
        -:   83:	
        1:   84:	return 0;
        -:   85:
        -:   86:}		
