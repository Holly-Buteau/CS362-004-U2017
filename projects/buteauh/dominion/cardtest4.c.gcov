        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int main()
        -:   10:{
        -:   11:        int i;
        1:   12:        int seed = 1000;
        1:   13:        int numPlayer = 2;
        1:   14:        int maxBonus = 10;
        -:   15:        int p, r, handCount;
        -:   16:        int bonus;
        1:   17:        int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   18:               , remodel, smithy, village, baron, great_hall};
        -:   19:        struct gameState G, T;
        1:   20:        int maxHandCount = 5;
        1:   21:        initializeGame(numPlayer, k, seed, &G);
        1:   22:        memcpy(&T, &G, sizeof(struct gameState));
        -:   23:
        1:   24:        printf("TESTING Great Hall\n");
        1:   25:        printf("Should have 3 extra cards in hand and 2 extra actions\n");
        -:   26:
        1:   27:        cardEffect(great_hall, 0, 0, 0, &T, 0, &bonus);
        -:   28:
        1:   29:        printf("Hand Count = %d, expected = %d\n", T.handCount[0], G.handCount[0] + 3 - 1);
        1:   30:        if (T.handCount[0] == G.handCount[0] + 3 - 1)
        1:   31:                printf("Success\n");
        -:   32:        else
    #####:   33:                printf("Failure\n");
        -:   34:
        1:   35:        printf("Deck Count = %d, expected = %d\n", T.deckCount[0], G.handCount[0] - 3);
        1:   36:        if (T.deckCount[0] == G.deckCount[0] - 3)
        1:   37:                printf("Success\n");
        -:   38:        else
    #####:   39:                printf("Failure\n");
        -:   40:
        1:   41:        printf("Played Count = %d, expected = %d\n", T.playedCardCount, G.playedCardCount + 1);
        1:   42:        if (T.playedCardCount == G.playedCardCount + 1)
        1:   43:                printf("Success\n");
        -:   44:        else
    #####:   45:                printf("Failure\n");
        -:   46:
        1:   47:        if (T.numActions == G.numActions + 2)
        1:   48:                printf("Success, there are 2 extra actions to take\n");
        -:   49:        else
    #####:   50:                printf("Failure, no extra actions allowed\n");
        -:   51:
        1:   52:	 printf("Testing Player 2\n");
        1:   53:         if (T.handCount[1] == G.handCount[1])
        -:   54:         {
        1:   55:                 if (T.deckCount[1] == G.deckCount[1])
        1:   56:                         printf("Success : Player 2 Unaffected\n");
        -:   57:         }
        -:   58: 
        -:   59:         else
    #####:   60:                 printf("Failure : Player 2 has been affected\n");
        -:   61:
        -:   62:	
        1:   63:	return 0;
        -:   64:
        -:   65:}
        -:   66:   
