        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int main()
        -:   10:{
        -:   11:	int i;
        1:   12:    	int seed = 1000;
        1:   13:   	int numPlayer = 2;
        1:   14:    	int maxBonus = 10;
        -:   15:    	int p, r, handCount;
        -:   16:    	int bonus;
        1:   17:    	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   18:               , remodel, smithy, village, baron, great_hall};
        -:   19:    	struct gameState G, T;
        1:   20:    	int maxHandCount = 5;
        -:   21:
        1:   22:	initializeGame(numPlayer, k, seed, &G);
        1:   23:        memcpy(&T, &G, sizeof(struct gameState));
        -:   24: 
        1:   25:        printf("TESTING Village\n");
        1:   26:        printf("Should have 3 extra cards in hand and 1 extra action\n");
        -:   27: 
        1:   28:        cardEffect(village, 0, 0, 0, &T, 0, &bonus);
        -:   29: 
        1:   30:        printf("Hand Count = %d, expected = %d\n", T.handCount[0], G.handCount[0] + 3 - 1);
        1:   31:        if (T.handCount[0] == G.handCount[0] + 3 - 1)
        1:   32:                printf("Success\n");
        -:   33:        else
    #####:   34:                printf("Failure\n");
        -:   35: 
        1:   36:        printf("Deck Count = %d, expected = %d\n", T.deckCount[0], G.handCount[0] - 3);
        1:   37:        if (T.deckCount[0] == G.deckCount[0] - 3)
        1:   38:                printf("Success\n");
        -:   39:        else
    #####:   40:                printf("Failure\n");
        -:   41: 
        1:   42:        printf("Played Count = %d, expected = %d\n", T.playedCardCount, G.playedCardCount + 1);
        1:   43:        if (T.playedCardCount == G.playedCardCount + 1)
        1:   44:                printf("Success\n");
        -:   45:        else
    #####:   46:                printf("Failure\n");
        -:   47: 
        1:   48:        if (T.numActions == G.numActions + 1)
        1:   49:		printf("Success, there is one extra action to take\n");
        -:   50:	else
    #####:   51:		printf("Failure, no extra actions allowed\n");
        -:   52: 
        1:   53:	 printf("Testing Player 2\n");
        1:   54:         if (T.handCount[1] == G.handCount[1])
        -:   55:         {
        1:   56:                 if (T.deckCount[1] == G.deckCount[1])
        1:   57:                         printf("Success : Player 2 Unaffected\n");
        -:   58:         }
        -:   59: 
        -:   60:        else
    #####:   61:                 printf("Failure : Player 2 has been affected\n");
        -:   62:
        -:   63: 
        1:   64:        return 0;
        -:   65:}	
