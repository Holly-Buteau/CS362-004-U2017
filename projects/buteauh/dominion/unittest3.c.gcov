        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        1:   11:int main() {
        -:   12:    int i;
        1:   13:    int seed = 1000;
        1:   14:    int numPlayer = 2;
        1:   15:    int maxBonus = 10;
        -:   16:    int p, r, handCount;
        -:   17:    int bonus;
        1:   18:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   19:               , remodel, smithy, village, baron, great_hall};
        -:   20:    struct gameState G, T;
        -:   21:    
        1:   22:    initializeGame(numPlayer, k, seed, &G);
        -:   23:
        1:   24:    printf("TESTING isGameOver\n");
        -:   25:
        1:   26:    memcpy(&T, &G, sizeof(struct gameState));
        1:   27:    G.supplyCount[province] = 1;
        -:   28: 
        1:   29:    printf("Testing if game is over with 1 province card\n");
        -:   30: 
        1:   31:    if (isGameOver(&G) == 1)
    #####:   32:        printf("Game Ends - Failure\n");
        -:   33: 
        -:   34:    else
        1:   35:        printf("Game Continues - Success\n"); 
        -:   36:
        1:   37:    G.supplyCount[province] = 0;
        -:   38:
        1:   39:    printf("Testing if game is over with 0 province cards\n");
        -:   40:
        1:   41:    if (isGameOver(&G) == 1)
        1:   42:	printf("Game Ends - Success\n");
        -:   43:
        -:   44:    else 
    #####:   45:	printf("Game Continues - Failure\n"); 
        -:   46: 
        1:   47:    memcpy(&G, &T, sizeof(struct gameState)); //clearing state again
        -:   48:
        -:   49:
        1:   50:    printf("Testing if game is over with 2 empty supply piles\n");
        1:   51:    G.supplyCount[gold] = 0;
        1:   52:    G.supplyCount[baron] = 0;
        -:   53:	
        1:   54:    if(isGameOver(&G) == 1)
    #####:   55:          printf("Game Ends - Failure\n");
        -:   56:    else
        1:   57:          printf("Game Continues - Success\n");
        -:   58:
        1:   59:    printf("Testing if game is over with 3 empty supply piles\n");
        -:   60:
        1:   61:    G.supplyCount[remodel] = 0;
        -:   62:    
        1:   63:    if(isGameOver(&G) == 1)
        1:   64:	printf("Game Ends - Success\n");
        -:   65:
        -:   66:    else
    #####:   67:	printf("Game Continues - Failure\n");
        -:   68:
        -:   69:
        1:   70:    return 0;
        -:   71:
        -:   72:}
        -:   73:    
